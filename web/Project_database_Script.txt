create table "APP".CUSTOMER
(
	CUSTOMERID INTEGER not null GENERATED ALWAYS AS IDENTITY (START WITH 1, INCREMENT BY 1) PRIMARY KEY,
	CUSTOMERFIRSTNAME VARCHAR(20) not null,
	CUSTOMERLASTNAME VARCHAR(20) not null,
	CUSTOMERADDRESS VARCHAR(100) not null,	
	CUSTOMERCITY VARCHAR(85) not null,
	CUSTOMERSTATE VARCHAR(55) not null,
	CUSTOMERCOUNTRY VARCHAR(50) not null,
	CUSTOMERCREDITDEBIT VARCHAR(10) not null,
        CUSTOMERCARDNAME VARCHAR(100) not null,
	CUSTOMERPAYMENTCARDNUMBER VARCHAR(20) not null,
	CUSTOMERPAYMENTCARDEXPIRATIONDATE VARCHAR(5) not null,
	CUSTOMERPAYMENTCARDCVV INTEGER not null
);

create table "APP".ORDERS
(
	ORDERID INTEGER not null GENERATED ALWAYS AS IDENTITY (START WITH 1, INCREMENT BY 1) PRIMARY KEY,
	CUSTOMERID INTEGER not null,	
	ORDERTOTAL DOUBLE not null
);

create table "APP".DONOR
(
	DONORID INTEGER not null GENERATED ALWAYS AS IDENTITY (START WITH 1, INCREMENT BY 1) PRIMARY KEY,
	DONORFULLNAME VARCHAR(100) not null,	
	DONOREMAIL VARCHAR(30) not null,
	DONORCREDITDEBIT VARCHAR(10) not null,
        DONORCARDNAME VARCHAR(100) not null,
	DONORPAYMENTCARDNUMBER VARCHAR(20) not null,
	DONORPAYMENTCARDEXPIRATIONDATE VARCHAR(5) not null,	
	DONORPAYMENTCARDCVV INTEGER not null
);

create table "APP".DONATION
(
	DONATIONID INTEGER not null GENERATED ALWAYS AS IDENTITY (START WITH 1, INCREMENT BY 1) PRIMARY KEY,
	DONORID INTEGER not null,
	DONATIONAMOUNT DOUBLE not null,
	DONATIONREOCCURRING VARCHAR(20) not null
	
);

create table "APP".PRODUCT
(
	PRODUCTID INTEGER not null PRIMARY KEY,
        PRODUCTNAME VARCHAR(100) not null,	
	PRODUCTPRICE DOUBLE not null
);

create table "APP".CROSSREFERENCE
(
	ORDERID INTEGER not null primary key,
	PRODUCTID INTEGER not null,
	PRODUCTQUANTITY INTEGER not null,
	PRODUCTSUBTOTAL DOUBLE not null
);

create table "APP".INVENTORY
 (       
        PRODUCTID INTEGER not null,
        PRODUCTNAME VARCHAR(100) not null,
        INVENTORYQUANTITY INTEGER DEFAULT 100 not null 
 );


Alter Table APP.INVENTORY
Add FOREIGN KEY (PRODUCTID)
References APP.product (PRODUCTID);

Alter Table APP.ORDERS
Add FOREIGN KEY (CUSTOMERID)
References APP.CUSTOMER (CUSTOMERID);

Alter Table APP.CROSSREFERENCE
Add FOREIGN KEY (PRODUCTID)
References APP.PRODUCT (PRODUCTID);

Alter Table APP.DONATION
Add FOREIGN KEY (DONORID)
References APP.DONOR (DONORID);

Alter Table APP.CROSSREFERENCE
Add FOREIGN KEY (ORDERID)
References APP.ORDERS (ORDERID);


INSERT INTO "APP".PRODUCT(PRODUCTID,PRODUCTNAME,PRODUCTPRICE)
VALUES (1,'Grain-Free Recipe for Dog', 0);

INSERT INTO "APP".PRODUCT(PRODUCTID,PRODUCTNAME,PRODUCTPRICE)
VALUES (2,'Herbal Flea Shampoo for Dogs & Cats', 0);

INSERT INTO "APP".PRODUCT(PRODUCTID,PRODUCTNAME,PRODUCTPRICE)
VALUES (3,'Relaxing Dog/Cat Bed', 0);

INSERT INTO "APP".PRODUCT(PRODUCTID,PRODUCTNAME,PRODUCTPRICE)
VALUES (4,'Grain-Free Freeze-Dried Cat Food', 0);


INSERT INTO "APP".INVENTORY(PRODUCTID,PRODUCTNAME, INVENTORYQUANTITY)
VALUES (1,'Grain-Free Recipe for Dog', 100);

INSERT INTO "APP".INVENTORY(PRODUCTID,PRODUCTNAME, INVENTORYQUANTITY)
VALUES (2,'Herbal Flea Shampoo for Dogs & Cats', 100);

INSERT INTO "APP".INVENTORY(PRODUCTID,PRODUCTNAME, INVENTORYQUANTITY)
VALUES (3,'Relaxing Dog/Cat Bed', 100);

INSERT INTO "APP".INVENTORY(PRODUCTID,PRODUCTNAME, INVENTORYQUANTITY)
VALUES (4,'Grain-Free Freeze-Dried Cat Food', 100);


SELECT PRODUCT.PRODUCTID, INVENTORY.PRODUCTNAME, INVENTORY.INVENTORYQUANTITY
FROM PRODUCT
INNER JOIN INVENTORY ON PRODUCT.PRODUCTID=INVENTORY.PRODUCTID;
